---
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@blocks/1/components/card";
import { Button } from "@blocks/1/components/button";
import { Input } from "@blocks/1/components/input";
import { cn } from "@blocks/1/utils";
import { initializeNewsPage } from "./news.client";

// Import base layout
import BaseLayout from "@blocks/1/1.astro";

// Import news manager
import { NewsManager } from "@blocks/1/news";
import path from "path";

// Initialize news manager
const newsManager = new NewsManager(path.join(process.cwd(), 'blocks/1/news.yaml'));

// Get initial data
const initialData = await newsManager.getPaginatedNews(1, 6);
const categories = await newsManager.getCategories();

// Format date helper
function formatDate(date: string) {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Calculate read time
function calculateReadTime(text: string): number {
  const wordsPerMinute = 200;
  const words = text.trim().split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

// Category colors
const categoryColors: Record<string, { bg: string; text: string }> = {
  Technology: { bg: "bg-blue-500/10", text: "text-blue-500" },
  Business: { bg: "bg-green-500/10", text: "text-green-500" },
  Science: { bg: "bg-purple-500/10", text: "text-purple-500" }
};

// Make helpers available to client script
const formatDateStr = formatDate.toString();
const calculateReadTimeStr = calculateReadTime.toString();
---

<BaseLayout title="Latest News" description="Stay up to date with the latest developments">
  <div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="mb-8 text-center">
      <h1 class="text-4xl font-bold tracking-tight">Latest News</h1>
      <p class="mt-2 text-muted-foreground">Stay up to date with the latest developments</p>
    </div>

    <!-- Search and Filter Section -->
    <div class="mb-8 flex flex-wrap gap-4 items-center justify-between">
      <div class="flex-1 min-w-[280px]">
        <Input 
          type="search" 
          placeholder="Search news..." 
          className="max-w-sm"
          id="search-input"
        />
      </div>
      <div class="flex flex-wrap gap-2" id="category-filters">
        <Button variant="outline" size="sm" data-category="" className="relative">
          All
          <span class="absolute -top-1 -right-1 w-2 h-2 rounded-full bg-primary" />
        </Button>
        {categories.map(category => (
          <Button 
            variant="outline" 
            size="sm" 
            data-category={category}
            className={cn(
              "relative",
              categoryColors[category]?.bg,
              categoryColors[category]?.text
            )}
          >
            {category}
          </Button>
        ))}
      </div>
    </div>

    <!-- News Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="news-grid">
      {initialData.items.map(item => (
        <Card className="flex flex-col group">
          {item.image && (
            <div class="relative aspect-video overflow-hidden rounded-t-lg">
              <div class="absolute inset-0 bg-black/10 group-hover:bg-black/20 transition-colors" />
              <img 
                src={item.image} 
                alt={item.title}
                class="object-cover w-full h-full transition-transform duration-300 group-hover:scale-105"
                loading="lazy"
              />
            </div>
          )}
          <CardHeader>
            <div class="flex items-center gap-2 text-sm text-muted-foreground mb-2">
              <span>{formatDate(item.date)}</span>
              <span>•</span>
              <span class={cn(
                "px-2 py-0.5 rounded-full text-xs font-medium",
                categoryColors[item.category]?.bg,
                categoryColors[item.category]?.text
              )}>
                {item.category}
              </span>
              <span>•</span>
              <span>{calculateReadTime(item.description)} min read</span>
            </div>
            <CardTitle className="line-clamp-2 group-hover:text-primary transition-colors">
              {item.title}
            </CardTitle>
            <CardDescription className="line-clamp-3">
              {item.description}
            </CardDescription>
          </CardHeader>
          <CardFooter className="mt-auto pt-6">
            <Button 
              variant="outline" 
              asChild
              className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors"
            >
              <a href={item.url}>
                Read More 
                <svg 
                  class="ml-2 w-4 h-4 transition-transform group-hover:translate-x-1" 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path 
                    stroke-linecap="round" 
                    stroke-linejoin="round" 
                    stroke-width="2" 
                    d="M17 8l4 4m0 0l-4 4m4-4H3" 
                  />
                </svg>
              </a>
            </Button>
          </CardFooter>
        </Card>
      ))}
    </div>

    <!-- Loading State -->
    <div id="loading-state" class="hidden">
      <div class="flex items-center justify-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    </div>

    <!-- Pagination -->
    <div class="mt-8 flex justify-center gap-2" id="pagination">
      <Button variant="outline" size="sm" data-page="prev" disabled>Previous</Button>
      {Array.from({ length: initialData.totalPages }, (_, i) => (
        <Button 
          variant="outline" 
          size="sm" 
          data-page={i + 1}
          data-active={i + 1 === 1}
          className={cn(
            i + 1 === 1 && "bg-primary text-primary-foreground"
          )}
        >
          {i + 1}
        </Button>
      ))}
      <Button 
        variant="outline" 
        size="sm" 
        data-page="next" 
        disabled={initialData.totalPages === 1}
      >
        Next
      </Button>
    </div>
  </div>
</BaseLayout>

<script>
  import { initializeNewsPage } from "./news.client";
  
  // Initialize the news page with the helper functions and category colors
  initializeNewsPage(
    document.currentScript?.getAttribute("data-format-date") || "",
    document.currentScript?.getAttribute("data-calculate-read-time") || "",
    JSON.parse(document.currentScript?.getAttribute("data-category-colors") || "{}")
  );
</script>

<script define:vars={{ formatDateStr, calculateReadTimeStr, categoryColors }} is:inline>
  // Set data attributes for the initialization script
  document.currentScript?.previousElementSibling?.setAttribute("data-format-date", formatDateStr);
  document.currentScript?.previousElementSibling?.setAttribute("data-calculate-read-time", calculateReadTimeStr);
  document.currentScript?.previousElementSibling?.setAttribute("data-category-colors", JSON.stringify(categoryColors));
</script>

<style>
  /* Add any custom styles here */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .button-outline {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2;
  }

  .button-sm {
    @apply h-9 rounded-md px-3;
  }

  .button-outline.active {
    @apply bg-primary text-primary-foreground hover:bg-primary/90;
  }

  /* Add smooth transitions */
  .card {
    transition: transform 0.2s ease-in-out;
  }

  .card:hover {
    transform: translateY(-2px);
  }

  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style> 