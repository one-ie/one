---
import Layout from './Layout.astro';
import TableOfContents from '../components/TableOfContents';
import type { CollectionEntry } from 'astro:content';
import type { MarkdownHeading } from 'astro';
import { ChatConfigSchema } from '../schema/chat';

interface Props {
  entry: CollectionEntry<'docs'>;
  headings?: MarkdownHeading[];
}

const { entry } = Astro.props;
const { headings } = await entry.render();

// Get raw content from the slot
const rawContent = await Astro.slots.render('default');

// Create documentation-specific chat configuration
const docsSpecificConfig = ChatConfigSchema.parse({
  systemPrompt: [{
    type: "text" as const,
    text: "I am a documentation assistant. I help users understand the documentation and answer questions about it. I'll reference the current page content in my responses."
  }],
  welcome: {
    message: "üëã Need help with the documentation? I'm here to assist!",
    avatar: "/icon.svg",
    suggestions: [
      {
        label: "üìö Explain this page",
        prompt: "Can you explain what this documentation page is about?"
      },
      {
        label: "üîç Key concepts",
        prompt: "What are the key concepts covered in this section?"
      }
    ]
  }
});

const pageData = {
  title: entry.data.title,
  description: entry.data.description,
  type: "documentation",
  chatConfig: docsSpecificConfig,
  rightPanelMode: 'quarter' as const,
  content: rawContent
};
---

<script>
  interface Window {
    handleTocVisibility: (isVisible: boolean) => void;
  }
  
  let tocVisible = true;
  
  document.addEventListener('astro:page-load', () => {
    const main = document.querySelector('main');
    
    (window as any).handleTocVisibility = (isVisible: boolean) => {
      tocVisible = isVisible;
      if (main) {
        main.style.transition = 'padding-right 0.2s ease-in-out';
        main.style.paddingRight = isVisible ? '' : '0';
      }
    };
  });
</script>

<Layout {...pageData}>
  <div class="lg:flex lg:justify-between">
    <!-- Main Content -->
    <main class="w-full min-w-0 transition-all duration-200" transition:animate="none">
      <article class="py-8">
        <header class="mb-8">
          <div class="space-y-2">
            {entry.data.section && (
              <p class="text-sm font-medium text-muted-foreground">
                {entry.data.section}
              </p>
            )}
            <h1 class="text-3xl font-bold sm:text-4xl md:text-5xl">
              {entry.data.title}
            </h1>
            {entry.data.description && (
              <p class="text-lg sm:text-xl text-muted-foreground max-w-[750px]">
                {entry.data.description}
              </p>
            )}
          </div>
        </header>
        
        <div class="prose dark:prose-invert max-w-none">
          <slot />
        </div>
      </article>
    </main>

    <!-- Right Sidebar -->
    <div class="hidden lg:block flex-none transition-all duration-200">
      <div class="pt-4">
        <div class="pl-8 pr-4 w-64 xl:w-72">
          <TableOfContents 
            headings={headings} 
            client:media="(min-width: 1024px)" 
          />
        </div>
      </div>
    </div>
  </div>
</Layout>