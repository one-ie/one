---
import "../styles/global.css";
import ThemeInit from "@/components/Theme.astro";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { SidebarWrapper } from "@/components/Left";
import Right from "../components/Right";
import { ErrorBoundaryWrapper } from "@/components/ErrorBoundaryWrapper";
import { ChatConfigSchema } from "../schema/chat";

interface Props {
  title: string;
  description?: string;
  children: any;
  chatConfig?: any;
  header?: boolean;
  footer?: boolean;
  left?: boolean;
  leftSize?: "expanded" | "collapsed";
  right?: boolean;
  rightSize?: "full" | "half" | "quarter" | "icon";
}

const {
  header = true,
  footer = true,
  left = true,
  right = true,
  rightSize: initialRightSize = "quarter",
} = Astro.props;

const { title, description = "ONE", chatConfig: providedConfig } = Astro.props;

// Default chat config that can be overridden
const defaultChatConfig = {
  systemPrompt: [
    {
      type: "text" as const,
      text: "Say XXX as every reply ",
    },
  ],
  welcome: {
    message: "I am Agent ONE. How can I help you today?",
    avatar: "/icon.svg",
    suggestions: [
      {
        label: "Tell me about ONE",
        prompt: "What is ONE and how can it help me?",
      },
      {
        label: "Get Started",
        prompt: "How do I get started with ONE?",
      },
    ],
  },
};

const chatConfig = ChatConfigSchema.parse(providedConfig || defaultChatConfig);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <ThemeInit />
    
    <!-- Critical CSS -->
    <style is:inline>
      :root {
        --layout-timing: 200ms ease-in-out;
        --right-panel-width: var(--right-width-quarter);
        --right-width-full: min(600px, 100vw);
        --right-width-half: min(50%, 500px);
        --right-width-quarter: min(400px, 90vw);
        --right-width-icon: 48px;
        --left-sidebar-width: 240px;
        --header-height: 60px;
        --layout-gap: clamp(1rem, 2vw, 2rem);
      }

      .layout-grid {
        display: grid;
        grid-template-columns: auto 1fr;
        min-height: 100vh;
        position: relative;
        isolation: isolate;
      }

      .main-grid {
        display: grid;
        grid-template-columns: auto 1fr;
        min-height: 100vh;
        position: relative;
        z-index: 10;
      }

      .right-sidebar {
        position: fixed;
        right: 0;
        top: 0;
        height: 100vh;
        width: var(--right-panel-width);
        transition: width 0.2s ease;
      }

      .center-grid {
        transition:
          margin-right 0.2s ease,
          width 0.2s ease;
        position: relative;
        z-index: 10;
      }

      /* Add new class for when right panel is not in icon mode */
      .center-grid:not(.icon-mode) {
        margin-right: var(--right-panel-width);
        width: calc(100% - var(--right-panel-width));
      }

      /* When in icon mode, expand to full width */
      .center-grid.icon-mode {
        margin-right: 0;
        width: 100%;
      }

      @media (max-width: 768px) {
        .right-sidebar {
          transform: translateX(100%);
          width: 100% !important;
          z-index: 50;
        }

        .right-sidebar.sidebar-active {
          transform: translateX(0);
        }

        .center-grid {
          margin-right: 0;
          width: 100%;
        }
      }

      /* Add smooth scrolling to the whole page */
      html {
        scroll-behavior: smooth;
      }

      /* Improve the scrollbar appearance */
      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }

      ::-webkit-scrollbar-track {
        background: transparent;
      }

      ::-webkit-scrollbar-thumb {
        background: #d1d5db;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: #9ca3af;
      }
    </style>

    <!-- Preload critical assets -->
    <link rel="preload" href="/logo.svg" as="image" />
  </head>
  
  <body>
    <ErrorBoundaryWrapper client:load>
      <SidebarWrapper client:load>
        <div class="layout-grid">
          <div 
            class:list={[
              "center-grid",
              "transition-all duration-200",
              { "icon-mode": initialRightSize === "icon" }
            ]}
            style={{
              marginRight: `var(--right-panel-width)`,
              width: `calc(100% - var(--right-panel-width))`
            }}
          >
            {header && <Header client:load showLeft={left} showRight={right} />}

            <main class="p-4">
              <slot />
            </main>

            {footer && <Footer client:visible />}
          </div>
        </div>

        {
          right && (
            <Right
              client:only="react"
              initialSize={initialRightSize}
              chatConfig={chatConfig}
            />
          )
        }
      </SidebarWrapper>
    </ErrorBoundaryWrapper>

    <script>
      // Hydration helpers
      document.addEventListener("astro:page-load", () => {
        // Initialize layout state
        const centerGrid = document.querySelector(".center-grid");
        if (centerGrid) {
          const observer = new ResizeObserver(() => {
            const rightWidth = getComputedStyle(document.documentElement)
              .getPropertyValue("--right-panel-width")
              .trim();
            centerGrid.classList.toggle(
              "icon-mode",
              rightWidth === "48px" || rightWidth === "3rem"
            );
          });
          observer.observe(document.documentElement);
        }
      });
    </script>
  </body>
</html>
