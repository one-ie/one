---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import {
  RocketIcon,
  LayersIcon,
  ReaderIcon,
  InfoCircledIcon,
  LightningBoltIcon,
  CodeIcon,
  QuestionMarkIcon,
  ArrowRightIcon,
} from "@radix-ui/react-icons";
import { ChatConfigSchema } from '../../schema/chat';

// Type definitions
type DocEntry = CollectionEntry<'docs'>;
type DocSection = Record<string, DocEntry[]>;

// Get all docs entries
const entries = await getCollection("docs");

// Group by sections and sort
const sections = entries.reduce((acc: DocSection, entry: DocEntry) => {
  const section = entry.data.section || "Other";
  if (!acc[section]) {
    acc[section] = [];
  }
  acc[section].push(entry);
  return acc;
}, {});

// Sort sections in desired order
const orderedSections: DocSection = {
  "Introduction": sections["Introduction"] || [],
  "Core Features": sections["Core Features"] || [],
  "Tutorials": sections["Tutorials"] || [],
  "Development": sections["Development"] || [],
  ...sections
};

// Configure AI assistant for docs
const chatConfig = ChatConfigSchema.parse({
  systemPrompt: [{
    type: "text" as const,
    text: `You are a documentation expert for ONE framework, helping users navigate and understand the documentation. Focus on:
- Explaining documentation sections and their relationships
- Providing quick access to relevant documentation
- Clarifying technical concepts
- Suggesting next steps in the learning path`
  }],
  welcome: {
    message: "ðŸ‘‹ Need help finding documentation? Ask me anything!",
    avatar: "/icon.svg",
    suggestions: [
      {
        label: "ðŸš€ Quick Start",
        prompt: "How do I get started with ONE?"
      },
      {
        label: "ðŸ“š Learning Path",
        prompt: "What's the recommended learning path?"
      },
      {
        label: "ðŸ’¡ Features",
        prompt: "What are ONE's main features?"
      }
    ]
  }
});

type IconMap = {
  [key: string]: typeof RocketIcon;
};

const iconMap: IconMap = {
  "Introduction": RocketIcon,
  "Core Features": LayersIcon,
  "Tutorials": ReaderIcon,
  "Development": CodeIcon,
  "Other": InfoCircledIcon
};

const getSectionIcon = (section: string) => {
  return iconMap[section] || InfoCircledIcon;
};

interface LearningPathStep {
  title: string;
  description: string;
  icon: typeof RocketIcon;
  level: string;
}

const learningPath: LearningPathStep[] = [
  {
    title: "Quick Start",
    description: "Set up your first AI-powered application",
    icon: RocketIcon,
    level: "Level 1",
  },
  {
    title: "Core Concepts",
    description: "Master the fundamental features",
    icon: LayersIcon,
    level: "Level 2",
  },
  {
    title: "Advanced Features",
    description: "Build complex applications",
    icon: LightningBoltIcon,
    level: "Level 3",
  },
  {
    title: "Resources",
    description: "Find help and community",
    icon: QuestionMarkIcon,
    level: "Support",
  }
];
---

<Layout
  title="Documentation - ONE Framework"
  description="Learn how to build AI-powered applications with ONE framework"
  chatConfig={chatConfig}
  rightPanelMode="quarter"
>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <!-- Hero Section -->
    <div class="text-center mb-16">
      <h1 class="text-4xl font-extrabold tracking-tight sm:text-5xl md:text-6xl mb-6 bg-clip-text text-transparent bg-gradient-to-r from-primary via-primary/80 to-primary/60">
        ONE Documentation
      </h1>
      <p class="mx-auto max-w-2xl text-lg text-muted-foreground mb-8">
        Everything you need to build intelligent applications with ONE framework
      </p>
      <div class="flex justify-center gap-4">
        <a href="/docs/get-started">
          <Button className="gap-2">
            <RocketIcon className="w-4 h-4" />
            Quick Start
          </Button>
        </a>
        <a href="/docs/create-a-chatbot-with-markdown">
          <Button variant="outline" className="gap-2">
            <ReaderIcon className="w-4 h-4" />
            Tutorials
          </Button>
        </a>
      </div>
    </div>

    <!-- Learning Path -->
    <div class="mb-16">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        {learningPath.map((step) => (
          <Card className="p-6">
            <div class="flex items-center gap-4 mb-4">
              <div class="p-2 rounded-lg bg-primary/10">
                <step.icon className="w-5 h-5 text-primary" />
              </div>
              <div>
                <p class="text-sm font-medium text-muted-foreground">{step.level}</p>
                <h3 class="font-semibold">{step.title}</h3>
              </div>
            </div>
            <p class="text-sm text-muted-foreground">{step.description}</p>
          </Card>
        ))}
      </div>
    </div>

    <!-- Documentation Sections -->
    <div class="space-y-16">
      {Object.entries(orderedSections).map(([section, entries]) => entries.length > 0 && (
        <section>
          <div class="flex items-center gap-2 mb-8">
            {(() => {
              const Icon = getSectionIcon(section);
              return <Icon className="w-6 h-6 text-primary" />;
            })()}
            <h2 class="text-2xl font-bold">{section}</h2>
          </div>
          
          <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {entries
              .sort((a: DocEntry, b: DocEntry) => (a.data.order || 0) - (b.data.order || 0))
              .map((entry: DocEntry) => (
                <a href={`/docs/${entry.slug}`} class="group">
                  <Card className="h-full p-6 hover:shadow-md transition-shadow">
                    <h3 class="text-lg font-semibold mb-2 group-hover:text-primary transition-colors">
                      {entry.data.title}
                    </h3>
                    <p class="text-sm text-muted-foreground mb-4">
                      {entry.data.description}
                    </p>
                    <div class="flex items-center text-sm font-medium text-primary opacity-0 group-hover:opacity-100 transition-opacity">
                      Read More
                      <ArrowRightIcon className="ml-1 w-4 h-4" />
                    </div>
                  </Card>
                </a>
              ))}
          </div>
        </section>
      ))}
    </div>
  </div>
</Layout>