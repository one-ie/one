---
import Layout from "../layouts/Layout.astro";
import { Card } from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { Calendar, LayoutList, LayoutGrid, Grid2x2, Grid3x3, FileText, Newspaper, Image } from 'lucide-react';

// Get view preference from URL or default to grid2
const viewMode = (Astro.url.searchParams.get('view') || 'grid2') as 'list' | 'grid1' | 'grid2' | 'grid3' | 'grid4';

// Helper to get file extension
function getFileExtension(filename: string): string {
  return filename.slice(((filename.lastIndexOf(".") - 1) >>> 0) + 2);
}

// Helper to get clean URL path
function getCleanPath(path: string): string {
  // Remove './' prefix and file extension
  return path
    .replace('./', '/') // Remove leading ./
    .replace(/\.(astro|md|mdx|svx)$/, '') // Remove file extension
    .replace('/index', '/'); // Convert /index to /
}

// Helper to format dates
function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short', 
    day: 'numeric'
  }).format(date);
}

// Get file icon based on extension
function getFileIcon(filename: string) {
  const ext = getFileExtension(filename);
  switch(ext) {
    case 'md':
    case 'mdx':
      return FileText;
    case 'svg':
      return Image;
    case 'svx':
      return Newspaper;
    case 'astro':
      return LayoutGrid;
    default:
      return FileText;
  }
}

// Helper to get clean title from filename
function getCleanTitle(filename: string): string {
  // Remove extension
  let title = filename.substring(0, filename.lastIndexOf('.'));
  // Convert - and _ to spaces
  title = title.replace(/[-_]/g, ' ');
  // Capitalize first letter of each word
  return title.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}

interface PageModule {
  frontmatter?: {
    title?: string;
    description?: string;
    pubDate?: string;
  };
}

// Get all files from pages directory using import.meta.glob
const pageGlob = import.meta.glob<PageModule>('./**/*.(astro|md|mdx|svx)');

// Convert glob result to array of file data
const pages = await Promise.all(
  Object.entries(pageGlob)
    .filter(([path]) => !path.includes('/map.astro')) // Exclude current page
    .map(async ([path, resolver]) => {
      const resolvedFile = await resolver();
      return {
        path,
        basename: path.split('/').pop() || '',
        frontmatter: resolvedFile.frontmatter || {},
        ext: getFileExtension(path.split('/').pop() || '')
      };
    })
);

// Sort files to prioritize markdown files
const sortedPages = pages.sort((a, b) => {
  // Markdown files first
  if ((a.ext === 'md' || a.ext === 'mdx') && (b.ext !== 'md' && b.ext !== 'mdx')) return -1;
  if ((b.ext === 'md' || b.ext === 'mdx') && (a.ext !== 'md' && a.ext !== 'mdx')) return 1;
  // Then sort by date if available
  const dateA = a.frontmatter?.pubDate ? new Date(a.frontmatter.pubDate) : new Date();
  const dateB = b.frontmatter?.pubDate ? new Date(b.frontmatter.pubDate) : new Date();
  return dateB.getTime() - dateA.getTime();
});

// Group files by type
const filesByType = sortedPages.reduce((acc, file) => {
  const ext = file.ext;
  if (!acc[ext]) {
    acc[ext] = [];
  }
  acc[ext].push(file);
  return acc;
}, {} as Record<string, any[]>);

// Sort file types to ensure markdown appears first
const sortedFileTypes = Object.entries(filesByType).sort(([typeA], [typeB]) => {
  if ((typeA === 'md' || typeA === 'mdx') && (typeB !== 'md' && typeB !== 'mdx')) return -1;
  if ((typeB === 'md' || typeB === 'mdx') && (typeA !== 'md' && typeA !== 'mdx')) return 1;
  return typeA.localeCompare(typeB);
});

---

<Layout 
  title={`Pages`}
  description="Browse all content"
>
  <div class="max-w-full px-4 sm:px-6 lg:px-8">
    {/* Header with View Toggles */}
    <div class="flex justify-between items-center mb-12">
      <div>
        <h1 class="text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/70">Pages</h1>
        <p class="text-lg text-muted-foreground mt-2">
          Explore our website content
        </p>
      </div>
      <div class="flex gap-2 bg-muted/50 p-1 rounded-lg">
        <a href="?view=list" class={`p-2.5 rounded-md transition-all ${viewMode === 'list' ? 'bg-background shadow-sm' : 'hover:bg-background/50'}`}>
          <LayoutList className="w-5 h-5" />
        </a>
        <a href="?view=grid1" class={`p-2.5 rounded-md transition-all ${viewMode === 'grid1' ? 'bg-background shadow-sm' : 'hover:bg-background/50'}`}>
          <LayoutGrid className="w-5 h-5" />
        </a>
        <a href="?view=grid2" class={`p-2.5 rounded-md transition-all ${viewMode === 'grid2' ? 'bg-background shadow-sm' : 'hover:bg-background/50'}`}>
          <Grid2x2 className="w-5 h-5" />
        </a>
        <a href="?view=grid3" class={`p-2.5 rounded-md transition-all ${viewMode === 'grid3' ? 'bg-background shadow-sm' : 'hover:bg-background/50'}`}>
          <Grid3x3 className="w-5 h-5" />
        </a>
      </div>
    </div>

    {/* Content Sections By Type */}
    {sortedFileTypes.map(([type, typeFiles]) => (
      <div class="mb-16">
        <div class="flex items-center gap-3 mb-8">
          <Badge 
            variant={type === 'md' || type === 'mdx' ? 'default' : 'secondary'} 
            className={`text-lg py-1.5 px-4 rounded-full ${(type === 'md' || type === 'mdx') ? 'bg-primary text-primary-foreground' : ''}`}
          >
            {type.toUpperCase()}
          </Badge>
          <span class="text-muted-foreground text-lg">({typeFiles.length} files)</span>
          {(type === 'md' || type === 'mdx') && (
            <span class="text-sm text-primary-foreground bg-primary/10 px-3 py-1 rounded-full">
              Documentation & Content
            </span>
          )}
        </div>

        {/* Grid Views */}
        <div class={`grid gap-6 ${viewMode === 'grid4' ? 'md:grid-cols-2 lg:grid-cols-4' : viewMode === 'grid3' ? 'md:grid-cols-3' : viewMode === 'grid2' ? 'md:grid-cols-2' : ''}`}>
          {(viewMode !== 'list') && 
            typeFiles.map(file => {
              const Icon = getFileIcon(file.path);
              return (
                <Card className="group overflow-hidden hover:shadow-lg transition-all duration-300 hover:-translate-y-1 border-muted/50">
                  <a href={getCleanPath(file.path)} class="block p-6">
                    <div class="flex items-center gap-3 mb-4">
                      <div class="p-2 rounded-lg bg-muted/50 group-hover:bg-primary/10 transition-colors">
                        <Icon className="w-6 h-6 text-muted-foreground group-hover:text-primary transition-colors" />
                      </div>
                      <Badge variant="secondary" className="group-hover:bg-primary/10 group-hover:text-primary transition-colors">
                        {type.toUpperCase()}
                      </Badge>
                    </div>
                    <h2 class="text-xl font-semibold mb-3 group-hover:text-primary transition-colors line-clamp-2">
                      {file.frontmatter?.title || getCleanTitle(file.basename)}
                    </h2>
                    {file.frontmatter?.description && (
                      <p class="text-sm text-muted-foreground line-clamp-2 mb-4 group-hover:text-muted-foreground/80 transition-colors">
                        {file.frontmatter.description}
                      </p>
                    )}
                    <div class="flex items-center text-sm text-muted-foreground group-hover:text-muted-foreground/80 transition-colors">
                      <Calendar className="w-4 h-4 mr-1.5" />
                      {file.frontmatter?.pubDate ? formatDate(new Date(file.frontmatter.pubDate)) : formatDate(new Date())}
                    </div>
                  </a>
                </Card>
              );
            })
          }
        </div>

        {/* List View */}
        {viewMode === 'list' && (
          <div class="space-y-4">
            {typeFiles.map(file => {
              const Icon = getFileIcon(file.path);
              return (
                <Card className="group hover:shadow-md transition-all duration-300 border-muted/50">
                  <a href={getCleanPath(file.path)} class="flex gap-4 p-5">
                    <div class="flex-shrink-0 p-2 rounded-lg bg-muted/50 group-hover:bg-primary/10 transition-colors">
                      <Icon className="w-6 h-6 text-muted-foreground group-hover:text-primary transition-colors" />
                    </div>
                    <div class="flex-grow min-w-0">
                      <h2 class="text-lg font-semibold group-hover:text-primary transition-colors">
                        {file.frontmatter?.title || getCleanTitle(file.basename)}
                      </h2>
                      {file.frontmatter?.description && (
                        <p class="text-sm text-muted-foreground line-clamp-1 mt-1 group-hover:text-muted-foreground/80 transition-colors">
                          {file.frontmatter.description}
                        </p>
                      )}
                    </div>
                    <div class="flex-shrink-0 flex items-center text-sm text-muted-foreground group-hover:text-muted-foreground/80 transition-colors">
                      <Calendar className="w-4 h-4 mr-1.5" />
                      {file.frontmatter?.pubDate ? formatDate(new Date(file.frontmatter.pubDate)) : formatDate(new Date())}
                    </div>
                  </a>
                </Card>
              );
            })}
          </div>
        )}
      </div>
    ))}

    {/* Empty State */}
    {pages.length === 0 && (
      <div class="text-center py-16 bg-muted/20 rounded-lg">
        <div class="max-w-md mx-auto">
          <FileText className="w-16 h-16 text-muted-foreground mx-auto mb-6 opacity-50" />
          <h2 class="text-2xl font-semibold mb-3">No pages found</h2>
          <p class="text-muted-foreground">
            No pages exist in the src/pages directory.
          </p>
        </div>
      </div>
    )}
  </div>
</Layout>

<style>
  .card {
    transition: all 0.2s ease-in-out;
  }
  .card:hover {
    transform: translateY(-2px);
  }
</style>
