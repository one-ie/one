---
import Layout from "../layouts/Layout.astro";
import { Card } from "../components/ui/card";
import { Play, Volume2, SkipBack, SkipForward } from 'lucide-react';

const podcastInfo = {
  title: "ONE Podcast",
  description: "Join us as we explore how AI agents are revolutionizing content creation, transforming education, and reshaping the blockchain landscape.",
  audioSrc: "/audio/podcast-truth-terminal.mp3"
};
---

<Layout
  title={podcastInfo.title}
  description={podcastInfo.description}
>
  <div class="container max-w-6xl mx-auto px-4 py-8">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4">{podcastInfo.title}</h1>
      <p class="text-xl text-muted-foreground mb-8">
        {podcastInfo.description}
      </p>
    </div>

    <div class="max-w-3xl mx-auto">
      <Card className="bg-card p-6">
        <div class="flex flex-col items-center space-y-6">
          <div class="w-full bg-accent/10 rounded-lg p-8 flex items-center justify-center">
            <img src="/public/logo.svg" alt="Podcast Cover" class="w-48 h-48 rounded-lg shadow-lg" />
          </div>
          
          <audio id="podcast-player" src={podcastInfo.audioSrc} autoplay class="hidden" />
          
          <div class="w-full flex flex-col space-y-4">
            <div class="w-full bg-accent/5 rounded-full h-2 overflow-hidden">
              <div id="progress-bar" class="bg-primary h-full w-0 transition-all duration-300"></div>
            </div>
            
            <div class="flex items-center justify-between w-full">
              <span id="current-time" class="text-sm text-muted-foreground">0:00</span>
              <div class="flex items-center space-x-6">
                <button class="text-2xl hover:text-primary transition-colors" onclick="document.getElementById('podcast-player').currentTime -= 10">
                  <SkipBack />
                </button>
                <button id="play-pause" class="text-4xl hover:text-primary transition-colors" onclick="togglePlay()">
                  <Play />
                </button>
                <button class="text-2xl hover:text-primary transition-colors" onclick="document.getElementById('podcast-player').currentTime += 10">
                  <SkipForward />
                </button>
              </div>
              <span id="duration" class="text-sm text-muted-foreground">0:00</span>
            </div>
            
            <div class="flex items-center space-x-3">
              <button class="text-lg hover:text-primary transition-colors" onclick="toggleMute()">
                <Volume2 />
              </button>
              <div class="group relative">
                <input
                  type="range"
                  id="volume"
                  class="w-24 h-1.5 bg-accent/5 rounded-full appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-3 [&::-webkit-slider-thumb]:h-3 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary [&::-webkit-slider-thumb]:cursor-pointer hover:[&::-webkit-slider-thumb]:bg-primary/80"
                  min="0"
                  max="1"
                  step="0.05"
                  value="1"
                  onchange="updateVolume(this.value)"
                  oninput="updateVolume(this.value)"
                />
                <div class="absolute -bottom-6 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity bg-background border rounded px-2 py-0.5 text-xs">
                  <span id="volume-percentage">100%</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  </div>
</Layout>

<script>
// State management
let lastVolume = 1;
let isPlaying = false;

// Utility functions
function formatTime(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

function updateProgress(): void {
  const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
  if (!player) return;

  const progressBar = document.getElementById('progress-bar');
  const currentTime = document.getElementById('current-time');
  const duration = document.getElementById('duration');
  
  const progress = player.duration ? (player.currentTime / player.duration) * 100 : 0;
  
  if (progressBar) {
    progressBar.style.width = `${progress}%`;
  }
  
  if (currentTime) {
    currentTime.textContent = formatTime(player.currentTime);
  }
  
  if (duration && !isNaN(player.duration)) {
    duration.textContent = formatTime(player.duration);
  }
}

// Player controls
function togglePlay(): void {
  const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
  if (!player) return;

  isPlaying ? player.pause() : player.play();
}

function updateVolume(value: string): void {
  const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
  const volumePercentage = document.getElementById('volume-percentage');
  if (!player) return;

  const volume = parseFloat(value);
  player.volume = volume;
  lastVolume = volume;

  if (volumePercentage) {
    volumePercentage.textContent = `${Math.round(volume * 100)}%`;
  }
}

function toggleMute(): void {
  const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
  const volumeInput = document.getElementById('volume') as HTMLInputElement | null;
  if (!player || !volumeInput) return;

  if (player.volume > 0) {
    lastVolume = player.volume;
    player.volume = 0;
    volumeInput.value = '0';
  } else {
    player.volume = lastVolume;
    volumeInput.value = lastVolume.toString();
  }
  updateVolume(player.volume.toString());
}

// Keyboard shortcuts
document.addEventListener('keydown', (e: KeyboardEvent) => {
  if (e.target instanceof HTMLInputElement) return;
  
  const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
  if (!player) return;

  switch(e.code) {
    case 'Space':
      e.preventDefault();
      togglePlay();
      break;
    case 'ArrowLeft':
      e.preventDefault();
      player.currentTime = Math.max(0, player.currentTime - 10);
      break;
    case 'ArrowRight':
      e.preventDefault();
      player.currentTime = Math.min(player.duration, player.currentTime + 10);
      break;
    case 'KeyM':
      e.preventDefault();
      toggleMute();
      break;
  }
});

// Initialize the audio player
const player = document.getElementById('podcast-player') as HTMLAudioElement | null;
const playPauseBtn = document.getElementById('play-pause');

if (player && playPauseBtn) {
  // Auto-play when ready
  player.addEventListener('loadedmetadata', () => {
    const durationElement = document.getElementById('duration');
    if (durationElement && !isNaN(player.duration)) {
      durationElement.textContent = formatTime(player.duration);
    }
    player.play().catch(() => {
      // Auto-play was prevented
      console.log('Auto-play was prevented. Click play to start.');
    });
  });

  // Update progress
  player.addEventListener('timeupdate', updateProgress);

  // Update play state
  player.addEventListener('play', () => {
    isPlaying = true;
    playPauseBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"/><rect x="14" y="4" width="4" height="16"/></svg>';
  });

  player.addEventListener('pause', () => {
    isPlaying = false;
    playPauseBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"/></svg>';
  });
}
</script>
