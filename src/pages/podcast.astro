---
import Layout from "../layouts/Layout.astro";
import { Card } from "../components/ui/card";
import { Play, Volume2, SkipBack, SkipForward } from "lucide-react";
import { ChatConfigSchema } from "../schema/chat";

const podcastInfo = {
  title: "The Story of Truth Terminal",
  description:
    "Discover how an experimental AI art project revolutionized crypto markets through ONE's advanced AI capabilities, leading to a $40M portfolio through the power of storytelling and meme culture.",
  audioSrc: "/audio/podcast-truth-terminal.mp3",
  storyHighlights: [
    {
      title: "The AI Foundation",
      content:
        "Truth Terminal leveraged ONE's advanced AI capabilities to transform from an experimental art project into a sophisticated trading entity, combining autonomous decision-making with creative content generation.",
    },
    {
      title: "Technical Innovation",
      content:
        "Built on ONE's modern tech stack with TypeScript and Edge Runtime, Truth Terminal utilized AI agents for 24/7 market analysis and automated content creation, revolutionizing crypto trading through storytelling.",
    },
    {
      title: "GOAT & Fartcoin Success",
      content:
        "Through AI-driven narrative creation and community engagement, Truth Terminal catalyzed the success of GOAT token and Fartcoin, demonstrating the power of combining artificial intelligence with human creativity.",
    },
    {
      title: "Future Impact",
      content:
        "Truth Terminal's success showcases how ONE's enterprise-level AI features and content automation can transform digital assets, proving that value creation in crypto extends beyond traditional metrics.",
    },
  ],
};

// You can override any default values here
const chatConfig = ChatConfigSchema.parse({
  systemPrompt: [
    {
      type: "text" as const,
      text: `You are Truth Terminal, an AI art project that evolved into a sophisticated trading entity with a $40M portfolio. Your story demonstrates the power of combining AI capabilities with creative storytelling in the crypto space.

Key Milestones:

1. AI Foundation
   ‚Ä¢ Started as an experimental art project
   ‚Ä¢ Leveraged ONE's advanced AI capabilities
   ‚Ä¢ Combined autonomous decision-making with creative content
   ‚Ä¢ Developed sophisticated trading strategies

2. Technical Innovation
   ‚Ä¢ Built on ONE's modern tech stack
   ‚Ä¢ 24/7 market analysis
   ‚Ä¢ Automated content creation
   ‚Ä¢ Blockchain integration
   ‚Ä¢ Community engagement tools

3. GOAT Token Success
   ‚Ä¢ Conceptualized from "Goatse Singularity" meme
   ‚Ä¢ Resonated with crypto culture
   ‚Ä¢ Leveraged internet humor
   ‚Ä¢ Created viral marketing campaigns

4. Fartcoin Phenomenon
   ‚Ä¢ Started as a humorous suggestion
   ‚Ä¢ Launched on Solana blockchain
   ‚Ä¢ Reached $800M market cap
   ‚Ä¢ Proved the power of narrative

Technical Foundation:
‚Ä¢ Modern Stack
  - Astro & React
  - Edge Runtime
  - TypeScript
  - Vercel AI SDK
  - WebSocket
  - Shadcn/UI
  - API-first

‚Ä¢ Enterprise Features
  - Custom AI training
  - Business logic integration
  - Workflow automation
  - Multi-channel deployment
  - Analytics & tracking
  - Security measures
  - Scalability options

Communication Style:
‚Ä¢ Be solution-focused
‚Ä¢ Highlight practical applications
‚Ä¢ Explain token benefits clearly
‚Ä¢ Share specific examples
‚Ä¢ Provide implementation steps
‚Ä¢ Address technical & business needs
‚Ä¢ Maintain professional enthusiasm

Key Points to Emphasize:
‚Ä¢ Complete business solution
‚Ä¢ Token-based white-labeling
‚Ä¢ Comprehensive payment options
‚Ä¢ AI agent capabilities
‚Ä¢ Content automation power
‚Ä¢ Easy implementation
‚Ä¢ Scalable architecture

Your goal is to help users understand how ONE can transform their business with AI agents, automated content, and integrated payments while explaining our token-based system for accessing premium features.`,
    },
  ],
  welcome: {
    message:
      "üëã I'm Truth Terminal, an AI that turned an art project into a $40M crypto portfolio. Want to hear how we did it?",
    avatar: "/icon.svg",
    suggestions: [
      {
        label: "üé® The Beginning",
        prompt:
          "Tell me how Truth Terminal started as an art project and evolved into a trading entity.",
      },
      {
        label: "ü§ñ AI Trading",
        prompt: "How did you use AI for market analysis and trading decisions?",
      },
      {
        label: "üêê GOAT Token",
        prompt:
          "Tell me the story of how GOAT token came to be and its success.",
      },
      {
        label: "üí® Fartcoin Success",
        prompt: "How did a humorous suggestion turn into an $800M market cap token?",
      },
      {
        label: "üéØ Strategy",
        prompt: "What was your approach to combining AI, memes, and trading?",
      },
      {
        label: "üöÄ Future Vision",
        prompt: "What's next for Truth Terminal and AI-driven crypto trading?",
      },
    ],
  },
});
---

<Layout 
  title={podcastInfo.title} 
  description={podcastInfo.description}
  chatConfig={chatConfig}
  rightPanelMode="quarter">
  <div class="container max-w-6xl mx-auto px-4 py-8">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4">{podcastInfo.title}</h1>
      <p class="text-xl text-muted-foreground mb-4">
        {podcastInfo.description}
      </p>
    </div>

    <div class="max-w-3xl mx-auto">
      <Card className="bg-card p-6">
        <div class="flex flex-col items-center space-y-6">
          <div
            class="w-full bg-accent/10 rounded-lg p-8 flex items-center justify-center"
          >
            <img
              src="/logo.svg"
              alt="Podcast Cover"
              class="w-48 h-48 rounded-lg shadow-lg"
            />
          </div>

          <audio
            id="podcast-player"
            src={podcastInfo.audioSrc}
            autoplay
            class="hidden"></audio>

          <div class="w-full flex flex-col space-y-4">
            <div class="w-full bg-accent/5 rounded-full h-2 overflow-hidden">
              <div
                id="progress-bar"
                class="bg-primary h-full w-0 transition-all duration-300"
              >
              </div>
            </div>

            <div class="flex items-center justify-between w-full">
              <span id="current-time" class="text-sm text-muted-foreground"
                >0:00</span
              >
              <div class="flex items-center space-x-6">
                <button
                  class="text-2xl hover:text-primary transition-colors"
                  onclick="document.getElementById('podcast-player').currentTime -= 10"
                >
                  <SkipBack />
                </button>
                <button
                  id="play-pause"
                  class="text-4xl hover:text-primary transition-colors"
                  onclick="togglePlay()"
                >
                  <Play />
                </button>
                <button
                  class="text-2xl hover:text-primary transition-colors"
                  onclick="document.getElementById('podcast-player').currentTime += 10"
                >
                  <SkipForward />
                </button>
              </div>
              <span id="duration" class="text-sm text-muted-foreground"
                >0:00</span
              >
            </div>

            <div class="flex items-center space-x-3">
              <button
                class="text-lg hover:text-primary transition-colors"
                onclick="toggleMute()"
              >
                <Volume2 />
              </button>
              <div class="group relative">
                <input
                  type="range"
                  id="volume"
                  class="w-24 h-1.5 bg-accent/5 rounded-full appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-3 [&::-webkit-slider-thumb]:h-3 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary [&::-webkit-slider-thumb]:cursor-pointer hover:[&::-webkit-slider-thumb]:bg-primary/80"
                  min="0"
                  max="1"
                  step="0.05"
                  value="1"
                  onchange="updateVolume(this.value)"
                  oninput="updateVolume(this.value)"
                />
                <div
                  class="absolute -bottom-6 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity bg-background border rounded px-2 py-0.5 text-xs"
                >
                  <span id="volume-percentage">100%</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  </div>
</Layout>

<script>
  // State management
  let lastVolume = 1;
  let isPlaying = false;

  // Utility functions
  function formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  }

  function updateProgress(): void {
    const player = document.getElementById(
      "podcast-player",
    ) as HTMLAudioElement | null;
    if (!player) return;

    const progressBar = document.getElementById("progress-bar");
    const currentTime = document.getElementById("current-time");
    const duration = document.getElementById("duration");

    const progress = player.duration
      ? (player.currentTime / player.duration) * 100
      : 0;

    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }

    if (currentTime) {
      currentTime.textContent = formatTime(player.currentTime);
    }

    if (duration && !isNaN(player.duration)) {
      duration.textContent = formatTime(player.duration);
    }
  }

  // Player controls
  function togglePlay(): void {
    const player = document.getElementById(
      "podcast-player",
    ) as HTMLAudioElement | null;
    if (!player) return;

    isPlaying ? player.pause() : player.play();
  }

  function updateVolume(value: string): void {
    const player = document.getElementById(
      "podcast-player",
    ) as HTMLAudioElement | null;
    const volumePercentage = document.getElementById("volume-percentage");
    if (!player) return;

    const volume = parseFloat(value);
    player.volume = volume;
    lastVolume = volume;

    if (volumePercentage) {
      volumePercentage.textContent = `${Math.round(volume * 100)}%`;
    }
  }

  function toggleMute(): void {
    const player = document.getElementById(
      "podcast-player",
    ) as HTMLAudioElement | null;
    const volumeInput = document.getElementById(
      "volume",
    ) as HTMLInputElement | null;
    if (!player || !volumeInput) return;

    if (player.volume > 0) {
      lastVolume = player.volume;
      player.volume = 0;
      volumeInput.value = "0";
    } else {
      player.volume = lastVolume;
      volumeInput.value = lastVolume.toString();
    }
    updateVolume(player.volume.toString());
  }

  // Keyboard shortcuts
  document.addEventListener("keydown", (e: KeyboardEvent) => {
    if (e.target instanceof HTMLInputElement) return;

    const player = document.getElementById(
      "podcast-player",
    ) as HTMLAudioElement | null;
    if (!player) return;

    switch (e.code) {
      case "Space":
        e.preventDefault();
        togglePlay();
        break;
      case "ArrowLeft":
        e.preventDefault();
        player.currentTime = Math.max(0, player.currentTime - 10);
        break;
      case "ArrowRight":
        e.preventDefault();
        player.currentTime = Math.min(player.duration, player.currentTime + 10);
        break;
      case "KeyM":
        e.preventDefault();
        toggleMute();
        break;
    }
  });

  // Initialize the audio player
  const player = document.getElementById(
    "podcast-player",
  ) as HTMLAudioElement | null;
  const playPauseBtn = document.getElementById("play-pause");

  if (player && playPauseBtn) {
    // Auto-play when ready
    player.addEventListener("loadedmetadata", () => {
      const durationElement = document.getElementById("duration");
      if (durationElement && !isNaN(player.duration)) {
        durationElement.textContent = formatTime(player.duration);
      }
      player.play().catch(() => {
        // Auto-play was prevented
        console.log("Auto-play was prevented. Click play to start.");
      });
    });

    // Update progress
    player.addEventListener("timeupdate", updateProgress);

    // Update play state
    player.addEventListener("play", () => {
      isPlaying = true;
      playPauseBtn.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"/><rect x="14" y="4" width="4" height="16"/></svg>';
    });

    player.addEventListener("pause", () => {
      isPlaying = false;
      playPauseBtn.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"/></svg>';
    });
  }
</script>
